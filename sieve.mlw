module Sito

  use int.Int
  use int.ComputerDivision
  use array.Array
  
  use number.Divisibility
  (* provides divides a b *)
  
  use number.Prime
  (* provides prime a *)
  
  lemma lower_fact : forall m i : int. 2 <= i < m < i * i -> divides i m -> exists d : int. 2 <= d < i /\ divides d m
  
  let lemma ineq (i : int) (k : int) 
  requires {k = i * i}
  requires {i >= 2}
  ensures {k > i}
  = ()
  
  (* implement Eratosthenes sieve *)
  let sito (n : int) :  array bool =
  requires { n >=2 }
  ensures { result.length = n + 1}
  ensures { forall i : int. 2 <= i <= n -> ( result[i] <-> prime i) }
  let a = Array.make (n + 1) true in
  for i = 2 to n do
    invariant { 2 <= i <= n + 1}
    invariant {forall m : int. 2 <= m <= n -> a[m] <-> (forall d : int. 2 <= d < m -> d < i -> a[d] -> not divides d m)}
    invariant {forall m : int. 2 <= m <= i <= n -> a[m] <-> prime m}
    assert {forall m : int. 2 <= i < m < i * i -> m <= n -> divides i m -> not a[m]};
    label B in
    if a[i] then begin
      let ref k = i * i in
        ineq i k;
        assert {k > i};
        let ghost ref j = i in
        while k <= n do
          invariant {2 <= i}
          invariant {k = j * i}
          invariant {i <= j /\ i * i <= k /\ i < k}
          invariant {a[i]}
          invariant {forall m : int. 2 <= m <= n -> not divides i m -> (a at B)[m] = a[m]}
          invariant {forall m : int. 2 <= m <= n -> not divides i m -> a[m] <-> (forall d : int. 2 <= d < m -> d <= i -> a[d] -> not divides d m)}
          invariant {forall m : int. 2 <= i < m < k -> m <= n -> divides i m -> not a[m]}
          variant {n - k}
          assert {divides i k};
          a[k] <- false;
          k <- k + i;
          j <- j + 1;
        done;
    end
  done;
  return a
  
end
